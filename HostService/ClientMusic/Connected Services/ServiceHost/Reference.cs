//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientMusic.ServiceHost {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceHost.IService", CallbackContract=typeof(ClientMusic.ServiceHost.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateProcess", ReplyAction="http://tempuri.org/IService/CreateProcessResponse")]
        int CreateProcess(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateProcess", ReplyAction="http://tempuri.org/IService/CreateProcessResponse")]
        System.Threading.Tasks.Task<int> CreateProcessAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Reply")]
        void Reply(int id, int idFrom);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/Reply")]
        System.Threading.Tasks.Task ReplyAsync(int id, int idFrom);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/TryEnterToCS")]
        void TryEnterToCS(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/TryEnterToCS")]
        System.Threading.Tasks.Task TryEnterToCSAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/UploadFile")]
        void UploadFile(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/UploadFile")]
        System.Threading.Tasks.Task UploadFileAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/UploadMusic")]
        void UploadMusic(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/UploadMusic")]
        System.Threading.Tasks.Task UploadMusicAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/UploadGame")]
        void UploadGame(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/UploadGame")]
        System.Threading.Tasks.Task UploadGameAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/MsgCallback")]
        void MsgCallback(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/SendReplyCallback")]
        void SendReplyCallback(int processToId, int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ClientMusic.ServiceHost.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<ClientMusic.ServiceHost.IService>, ClientMusic.ServiceHost.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int CreateProcess(string name) {
            return base.Channel.CreateProcess(name);
        }
        
        public System.Threading.Tasks.Task<int> CreateProcessAsync(string name) {
            return base.Channel.CreateProcessAsync(name);
        }
        
        public void Reply(int id, int idFrom) {
            base.Channel.Reply(id, idFrom);
        }
        
        public System.Threading.Tasks.Task ReplyAsync(int id, int idFrom) {
            return base.Channel.ReplyAsync(id, idFrom);
        }
        
        public void TryEnterToCS(int id) {
            base.Channel.TryEnterToCS(id);
        }
        
        public System.Threading.Tasks.Task TryEnterToCSAsync(int id) {
            return base.Channel.TryEnterToCSAsync(id);
        }
        
        public void UploadFile(int id) {
            base.Channel.UploadFile(id);
        }
        
        public System.Threading.Tasks.Task UploadFileAsync(int id) {
            return base.Channel.UploadFileAsync(id);
        }
        
        public void UploadMusic(int id) {
            base.Channel.UploadMusic(id);
        }
        
        public System.Threading.Tasks.Task UploadMusicAsync(int id) {
            return base.Channel.UploadMusicAsync(id);
        }
        
        public void UploadGame(int id) {
            base.Channel.UploadGame(id);
        }
        
        public System.Threading.Tasks.Task UploadGameAsync(int id) {
            return base.Channel.UploadGameAsync(id);
        }
    }
}
